{-# OPTIONS --cubical  #-}
module Glow.Simple.Lurk.ControlFlowTrans where

open import Agda.Builtin.String
open import Agda.Builtin.Char
-- open import Agda.Builtin.List

open import Cubical.Foundations.Everything 

open import Cubical.Data.Nat renaming (_+_ to _‚Ñï+_)
open import Cubical.Data.Fin
open import Cubical.Data.Int
open import Cubical.Data.Prod
open import Cubical.Data.Sum renaming (elim to sum-elim ; rec to sum-rec ; map to sum-map)
open import Cubical.Data.List renaming (map to map-List)


open import Cubical.Data.Maybe renaming (rec to recMaybe)
open import Cubical.Data.Bool hiding (if_then_else_)  renaming (Bool to ùüö)

open import Cubical.Data.Empty renaming (elim to empty-elim ; rec to empty-rec ;  ‚ä• to Empty )


open import Cubical.Data.Nat.Order.Recursive
-- open import Cubical.Functions.Logic

open import Cubical.Relation.Nullary.Base renaming (¬¨_ to IsEmpty)

open import Glow.Linked

open import Glow.Simple.AST

open import Glow.DecEqMore

open import Glow.Simple.ContextMore

open import Glow.Simple.VarSubst

open import Glow.Simple.ParamsSubst

-- open import Glow.Simple.Monad


open import Cubical.HITs.Interval

open import Glow.ListDecProps

open import Cubical.Categories.Category

open import Glow.Simple.Lurk.HaskellInterface

open import Glow.Simple.Lurk.Translation

open import Glow.Simple.Example



data LabeledValue[_][_] {‚Ñì} {A : Type ‚Ñì} : String ‚Üí A ‚Üí Type ‚Ñì where
  labeledValue[_][_]labeledValueEnd : (label : String) ‚Üí (a : A) ‚Üí LabeledValue[ label ][ a ] 

mkLV : ‚àÄ {‚Ñì label} {A : Type ‚Ñì} ‚Üí {a : A} ‚Üí LabeledValue[ label ][ a ]
mkLV {label = label} {a = a} = labeledValue[ label ][ a ]labeledValueEnd

open import Glow.Simple.UnsafeProjectOut

module _ {Identifier : Type‚ÇÄ} {{IsDiscrete-Identifier : IsDiscrete Identifier}}
            {BuiltInsIndex : Type‚ÇÄ} {{IsDiscrete-BuiltInsIndex : IsDiscrete BuiltInsIndex}}
              {builtIns : BuiltIns' BuiltInsIndex {{IsDiscrete-BuiltInsIndex}}} where


  everyIsDistrusted-lem : (ptpsIds : List (Identifier)) ‚Üí ‚àÄ name ‚Üí
                           ExistMemberAs (PathP (Œª x‚ÇÅ ‚Üí Identifier) name)
                                  (map-List proj‚ÇÅ (map-List (_, false) ptpsIds)) ‚Üí
                           ExistMemberAs (Œª x‚ÇÅ ‚Üí (name ‚â° proj‚ÇÅ x‚ÇÅ) √ó (false ‚â° proj‚ÇÇ x‚ÇÅ))
                                (map-List (_, false) ptpsIds)

  everyIsDistrusted-lem [] name ()
  everyIsDistrusted-lem (x ‚à∑ ptpsIds) name (inl x‚ÇÅ) = inl (x‚ÇÅ , refl)
  everyIsDistrusted-lem (x ‚à∑ ptpsIds) name (inr x‚ÇÅ) = inr (proj‚ÇÅ x‚ÇÅ ‚àò proj‚ÇÅ , (everyIsDistrusted-lem ptpsIds name (proj‚ÇÇ x‚ÇÅ)))


  
  --TODO: parametrisation by abstracted fields of interactionHead may not be good idea,
  --      instead try refactoring to parametrization via InteractionHead + apropriate predicate of distrustedy
  module MonadicControlFlow (ptpsIds : List (Identifier)) (prms : _) (uniquePrms : _) where

    ptps : List (Identifier √ó ParticipantModality)
    ptps = map-List (_, distrusted) ptpsIds
    
    module MonadicControlFlowUP (uniquePtps : _) where

      ptps'' = ptps

      ih'' : AST.InteractionHead Identifier builtIns one
      ih'' = (AST.interactionHead ptps prms {uniquePrms} {uniquePtps}) 

      open AST.InteractionHead {Identifier} {builtIns = builtIns} {one} ih''

   

      open SubstAll {Identifier} {builtIns = builtIns} {ptps = ptps}
      open SubstOne {Identifier} {builtIns = builtIns} {ptps = ptps}

   -- Context :   (A : Int) :: (B : Int) :: (C : Bool) :: []
   --             (A : 3)   :: (B : 2) :: (C : True ) :: []



   -- PublicContext : (A : Int ) :: { ( (B : Int) :: (C : Int)  ) , (D : Int)  } :: []
   --                 (A : 3) :: ( B : 2) :: (C : 4) :: []
   --                 (A : 2) :: (D : 4) :: []


      data PublicContext : Type‚ÇÄ where
        PC[] : PublicContext
        _PC‚à∑_ : (GType) ‚äé (PublicContext √ó PublicContext) ‚Üí PublicContext ‚Üí PublicContext 
        -- ‚ü®_‚à∂_‚ü©PC‚à∑_ : Identifier ‚Üí GType ‚Üí PublicContext ‚Üí PublicContext
        -- [_‚à®_]bPC‚à∑_ : PublicContext ‚Üí PublicContext ‚Üí PublicContext ‚Üí PublicContext

      {-# TERMINATING #-}
      PCRec : PublicContext ‚Üí Type‚ÇÄ
      PCRec PC[] = Unit
      PCRec (x PC‚à∑ x‚ÇÅ) = (sum-elim GTypeAgdaRep (Œª b ‚Üí PCRec (proj‚ÇÅ b) ‚äé PCRec (proj‚ÇÇ b)) x) √ó PCRec x‚ÇÅ 

      _PC++_ : PublicContext ‚Üí PublicContext ‚Üí PublicContext
      _PC++_ PC[] x‚ÇÅ = x‚ÇÅ
      _PC++_ (x PC‚à∑ x‚ÇÇ) x‚ÇÅ = x PC‚à∑ (x‚ÇÇ PC++  x‚ÇÅ)
      
      StmntPC : ‚àÄ {Œì} ‚Üí Stmnt Œì ‚Üí PublicContext

      StatementsPC : ‚àÄ {Œì} ‚Üí Statements Œì ‚Üí PublicContext
      ExprPC : ‚àÄ {Œì Œ§} ‚Üí Expr Œì Œ§ ‚Üí PublicContext

      StatementsPC []L = PC[]
      StatementsPC (h ‚à∑L x) = StmntPC h  PC++ StatementsPC x 

      ExprPC (AST.var x) = PC[]
      ExprPC (AST.body (AST.bodyR stmnts‚ÇÅ expr‚ÇÅ)) = StatementsPC stmnts‚ÇÅ PC++ ExprPC expr‚ÇÅ
      ExprPC (AST.lit x) = PC[]
      ExprPC (x AST.$' x‚ÇÅ) = PC[]
      ExprPC (AST.input x) = PC[]
      ExprPC (AST.sign x) = PC[]
      ExprPC {Œ§ = Œ§} (AST.receivePublished x) = inl (Œ§) PC‚à∑ PC[]
      ExprPC (AST.if x then x‚ÇÅ else x‚ÇÇ) = inr (ExprPC x‚ÇÅ , ExprPC x‚ÇÇ) PC‚à∑ PC[]

      StmntPC {Œì} (AST.bindingS x) = w x
         where
          w : BStmnt Œì ‚Üí PublicContext
          w (AST.BS-let ce x) = ExprPC x
          w (AST.BS-publish! p x) = PC[] 
      StmntPC {Œì} (AST.nonBindingS (AST.stmntNBS x)) = PC[]
        -- where
        --   w : NBStmnt Œì ‚Üí PublicContext
        --   w (AST.NBS-require! x) = PC[]
        --   w (AST.NBS-deposit! x x‚ÇÅ) = PC[]
        --   w (AST.NBS-withdraw! x x‚ÇÅ) = PC[]
        --   w (AST.NBS-publishVal! x x‚ÇÅ) = PC[] -- <- imposible!!
      StmntPC {Œì} (AST.nonBindingS (AST.exprNBS x)) = ExprPC x

      -- evalWithPC : ‚àÄ {Œì Œ§} ‚Üí (e : Expr Œì Œ§) ‚Üí (r : Rec Œì) ‚Üí PCRec (ExprPC e) ‚Üí GTypeAgdaRep Œ§
      -- evalWithPC = {!!}

      -- evalWithPC : ‚àÄ {Œ§} ‚Üí (e : Expr (con [] nothing) Œ§) ‚Üí PCRec (ExprPC e) ‚Üí GTypeAgdaRep Œ§
      -- evalWithPC e x = {!!}




      record PCExpr (pc : PublicContext) (Œ§ : GType) : Type‚ÇÄ where
        field
           e : Expr (con [] nothing) Œ§
           pc‚â° : ExprPC e ‚â° pc


      FreeExpr = Expr (con [] nothing)

      PID = DistrustedParticipantId
      
      -- TODO : try to parametrise be all definitions from AST
      module _ {Expr : Context ‚Üí GType ‚Üí Type‚ÇÄ} {IsPureE : ‚àÄ {Œì Œ§} ‚Üí Expr Œì Œ§ ‚Üí DecPropŒ£} where
  
        data Action' (Œì : Context) : Type‚ÇÄ where
          withdrawA : (e : Expr Œì Nat) ‚Üí ‚ü® IsPureE e ‚ü© ‚Üí Action' Œì
          depositA : (e : Expr Œì Nat) ‚Üí ‚ü® IsPureE e ‚ü© ‚Üí Action' Œì 

        _,_‚¶Ç_ : Context ‚Üí Identifier ‚Üí GType ‚Üí Context
        Œì , x ‚¶Ç Œ§ = addToContext Œì (AST.ice nothing x Œ§)

        data LMonad' (A : Type‚ÇÄ) (Œì : Context) (Œ§ : GType) : Type‚ÇÄ where
          action : A ‚Üí PID ‚Üí Action' Œì ‚Üí Œ§ ‚â° Unit·µç ‚Üí LMonad' A Œì Œ§
          require : (e : Expr Œì Bool) ‚Üí (‚ü® IsPureE e ‚ü©) ‚Üí Œ§ ‚â° Unit·µç ‚Üí LMonad' A Œì Œ§
          expectPub : A ‚Üí PID ‚Üí LMonad' A Œì Œ§
          bind : ‚àÄ {x Œ§'} ‚Üí LMonad' A Œì Œ§' ‚Üí LMonad' A (Œì , x ‚¶Ç Œ§') Œ§ ‚Üí LMonad' A Œì Œ§
          next : ‚àÄ {Œ§'} ‚Üí LMonad' A Œì Œ§' ‚Üí LMonad' A Œì Œ§ ‚Üí LMonad' A Œì Œ§
          pure : (e : Expr Œì Œ§) ‚Üí ‚ü® IsPureE e ‚ü© ‚Üí LMonad' A Œì Œ§
          branch : (e : Expr Œì Bool) ‚Üí (‚ü® IsPureE e ‚ü©) ‚Üí LMonad' A Œì Œ§ ‚Üí LMonad' A Œì Œ§ ‚Üí LMonad' A Œì Œ§

        labelStates : ‚àÄ {A Œì Œ§} ‚Üí ‚Ñï ‚Üí LMonad' A Œì Œ§ ‚Üí (Œ£ ‚Ñï Œª _ ‚Üí LMonad' ‚Ñï Œì Œ§) 
        labelStates n (action x x‚ÇÅ x‚ÇÇ x‚ÇÉ) = (suc n) , (action n x‚ÇÅ x‚ÇÇ x‚ÇÉ)
        labelStates n (require e x x‚ÇÅ) = n , (require e x x‚ÇÅ)
        labelStates n (expectPub x x‚ÇÅ) = (suc n) , (expectPub n x‚ÇÅ)
        labelStates n (bind x x‚ÇÅ) =
          let (n‚ÇÅ , x') = labelStates n x
              (n‚ÇÇ , x‚ÇÅ') = labelStates n‚ÇÅ x‚ÇÅ
          in (n‚ÇÇ , bind x' x‚ÇÅ')
        labelStates n (next x x‚ÇÅ) =
          let (n‚ÇÅ , x') = labelStates n x
              (n‚ÇÇ , x‚ÇÅ') = labelStates n‚ÇÅ x‚ÇÅ
          in (n‚ÇÇ , next x' x‚ÇÅ')
        labelStates n (pure e x) = n , pure e x
        labelStates n (branch e y x x‚ÇÅ) =
          let (n‚ÇÅ , x') = labelStates n x
              (n‚ÇÇ , x‚ÇÅ') = labelStates n‚ÇÅ x‚ÇÅ
          in (n‚ÇÇ , (branch e y x' x‚ÇÅ'))

        labelStates' : ‚àÄ {A Œì Œ§} ‚Üí LMonad' A Œì Œ§ ‚Üí (LMonad' ‚Ñï Œì Œ§)  
        labelStates' = snd ‚àò labelStates 1

      Action = Action' {Expr} {IsPureE}
      LMonad = LMonad' {Expr} {IsPureE}

      UAction = Action' {Œª _ _ ‚Üí Unsafe.Expr} {Œª _ ‚Üí Unit-dp }
      ULMonad = LMonad' {Œª _ _ ‚Üí Unsafe.Expr} {Œª _ ‚Üí Unit-dp }


      everyIsDistrusted : ParticipantId ‚Üí PID
      everyIsDistrusted (AST.pId name {x}) = AST.pId name {everyIsDistrusted-lem _ _ x}




      module tryTranslation where
        private       
          _>>=_ = bind-Maybe

        mbIsPureE : ‚àÄ {Œì Œ§} ‚Üí (e : Expr Œì Œ§) ‚Üí Maybe ‚ü® IsPureE e ‚ü©
        mbIsPureE e = mbDec (IsPureE e)

        toLMonadE : ‚àÄ Œì Œ§ ‚Üí Expr Œì Œ§ ‚Üí Maybe (LMonad Unit Œì Œ§)
        toLMonadNBS : ‚àÄ Œì ‚Üí NBStmnt+Expr Œì ‚Üí Maybe (LMonad Unit Œì Unit·µç)

        toLMonadNBS Œì (AST.stmntNBS (AST.NBS-require! x)) =  do
          ispure-x ‚Üê mbIsPureE x
          just ((require x ispure-x refl))
        toLMonadNBS Œì (AST.stmntNBS (AST.NBS-deposit! x x‚ÇÅ)) = do
          ispure-x‚ÇÅ ‚Üê mbIsPureE x‚ÇÅ
          just ((action tt (everyIsDistrusted x) (depositA x‚ÇÅ ispure-x‚ÇÅ) refl))
        toLMonadNBS Œì (AST.stmntNBS (AST.NBS-withdraw! x x‚ÇÅ)) = do
          ispure-x‚ÇÅ ‚Üê mbIsPureE x‚ÇÅ
          just ((action tt (everyIsDistrusted x) (withdrawA x‚ÇÅ ispure-x‚ÇÅ) refl))
          -- e ‚Üê toLMonadE _ _ x‚ÇÅ -- TODO make it work for impure exprs!
          -- just (bind e ((action tt (everyIsDistrusted x) (withdrawA {!!} {!!}) refl)))
        toLMonadNBS Œì (AST.stmntNBS (AST.NBS-publishVal! x x‚ÇÅ)) = nothing
        toLMonadNBS Œì (AST.exprNBS x) = do
          e ‚Üê  (toLMonadE _ _ x) 
          just (next e (pure (lit tt) tt))
        -- toLMonadS : ‚àÄ Œì ‚Üí Stmnt Œì ‚Üí Maybe (LMonad Unit Œì Unit·µç)

        toLMonadE Œì Œ§ (AST.var x) = just (pure (var x) tt)
        
        toLMonadE Œì Œ§ (AST.body (AST.bodyR []L expr‚ÇÅ)) = toLMonadE Œì Œ§ expr‚ÇÅ
        toLMonadE (AST.con entries‚ÇÅ nothing) Œ§ (AST.body (AST.bodyR (AST.bindingS (AST.BS-let (AST.ice nothing name type) x) ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ)) = 
          do e' ‚Üê toLMonadE _ type x
             es' ‚Üê toLMonadE _ _ (body (bodyR stmnts‚ÇÅ expr‚ÇÅ ))
             just (bind e' es')
        toLMonadE (AST.con entries‚ÇÅ (just x‚ÇÅ)) Œ§ (AST.body (AST.bodyR (AST.bindingS (AST.BS-let (AST.ice nothing name type) x) ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ)) = nothing
        toLMonadE Œì Œ§ (AST.body (AST.bodyR (AST.bindingS (AST.BS-let (AST.ice (just x‚ÇÅ) name type) x) ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ)) = nothing
        toLMonadE Œì Œ§ (body (bodyR (bindingS (BS-publish! p x) ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ)) = nothing
        toLMonadE Œì Œ§ (body (bodyR (nonBindingS x ‚à∑L stmnts‚ÇÅ) expr‚ÇÅ)) =
          do e' ‚Üê toLMonadNBS _ x
             es' ‚Üê toLMonadE _ _ (body (bodyR stmnts‚ÇÅ expr‚ÇÅ ))
             just (next e' es')
        
        toLMonadE Œì Œ§ (AST.lit x) = just (pure (lit x) tt)
        toLMonadE Œì Œ§ (x AST.$' x‚ÇÅ) = just (pure (x AST.$' x‚ÇÅ) tt)
        toLMonadE Œì Œ§ (AST.input x) = nothing
        toLMonadE Œì Œ§ (AST.sign x) = nothing
        toLMonadE Œì Œ§ (AST.receivePublished x) = just (expectPub _ x)
        toLMonadE Œì Œ§ (AST.if e then e‚ÇÅ else e‚ÇÇ) = do
          ispure-e ‚Üê mbIsPureE e
          e‚ÇÅ' ‚Üê toLMonadE Œì _ e‚ÇÅ
          e‚ÇÇ' ‚Üê toLMonadE Œì _ e‚ÇÇ
          just (branch e ispure-e e‚ÇÅ' e‚ÇÇ')

        toLMonad : ‚àÄ Œì ‚Üí Statements Œì ‚Üí Maybe (LMonad Unit Œì Unit·µç)
        toLMonad Œì x = toLMonadE Œì Unit·µç (body (AST.bodyR x (lit tt)))


      module tryTranslationUnsafe where
        private       
          _>>=_ = bind-Maybe

        module U = Unsafe

        mbIsPureE : (e : U.Expr) ‚Üí Maybe ‚ü® Unit-dp ‚ü©
        mbIsPureE e = just _


        toLMonadE : ‚àÄ Œì Œ§ ‚Üí (e : U.Expr) ‚Üí Maybe (ULMonad Unit Œì Œ§)
        toLMonadNBS : ‚àÄ Œì ‚Üí U.NBStmnt+Expr ‚Üí Maybe (ULMonad Unit Œì Unit·µç)

        toLMonadNBS Œì (U.stmntNBS (U.NBS-require! x)) =  do
          ispure-x ‚Üê mbIsPureE x
          just ((require x ispure-x refl))
        toLMonadNBS Œì (U.stmntNBS (U.NBS-deposit! x x‚ÇÅ)) = do
          ispure-x‚ÇÅ ‚Üê mbIsPureE x‚ÇÅ
          just ((action tt (everyIsDistrusted x) (depositA x‚ÇÅ ispure-x‚ÇÅ) refl))
        toLMonadNBS Œì (U.stmntNBS (U.NBS-withdraw! x x‚ÇÅ)) = do
          ispure-x‚ÇÅ ‚Üê mbIsPureE x‚ÇÅ
          just ((action tt (everyIsDistrusted x) (withdrawA x‚ÇÅ ispure-x‚ÇÅ) refl))

        toLMonadNBS Œì (U.stmntNBS (U.NBS-publishVal! x x‚ÇÅ)) = nothing
        toLMonadNBS Œì (U.exprNBS x) = do
          e ‚Üê  (toLMonadE _ (U.Œ§? x) x) 
          just (next e (pure (U.lit (record { gType = Unit·µç ; gValue = tt })) tt))


        toLMonadE Œì Œ§ (U.var t x) = just (pure (U.var t x) tt)
        
        toLMonadE Œì Œ§ (U.body (U.bodyR [] expr‚ÇÅ)) = toLMonadE Œì Œ§ expr‚ÇÅ
        toLMonadE Œì Œ§ (U.body (U.bodyR (U.bindingS (U.BS-let nothing name type x) ‚à∑ stmnts‚ÇÅ) expr‚ÇÅ)) = 
          do e' ‚Üê toLMonadE _ type x
             es' ‚Üê toLMonadE _ _ (U.body (U.bodyR stmnts‚ÇÅ expr‚ÇÅ ))
             just (bind {x = name} e' es')

        toLMonadE Œì Œ§ (U.body (U.bodyR (U.bindingS (U.BS-let (just x‚ÇÅ) name type x) ‚à∑ stmnts‚ÇÅ) expr‚ÇÅ)) = nothing
        toLMonadE Œì Œ§ (U.body (U.bodyR (U.bindingS (U.BS-publish! p _ x) ‚à∑ stmnts‚ÇÅ) expr‚ÇÅ)) = nothing
        toLMonadE Œì Œ§ (U.body (U.bodyR (U.nonBindingS x ‚à∑ stmnts‚ÇÅ) expr‚ÇÅ)) =
          do e' ‚Üê toLMonadNBS _ x
             es' ‚Üê toLMonadE _ _ (U.body (U.bodyR stmnts‚ÇÅ expr‚ÇÅ ))
             just (next e' es')
        
        toLMonadE Œì Œ§ (U.lit x) = just (pure (U.lit x) tt)
        toLMonadE Œì Œ§ (x U.$' x‚ÇÅ) = just (pure (x U.$' x‚ÇÅ) tt)
        toLMonadE Œì Œ§ (U.input _ x) = nothing
        toLMonadE Œì Œ§ (U.sign x) = nothing
        toLMonadE Œì Œ§ (U.receivePublished t x) = just (expectPub _ x)
        toLMonadE Œì Œ§ (U.if e then e‚ÇÅ else e‚ÇÇ) = do
          ispure-e ‚Üê mbIsPureE e
          e‚ÇÅ' ‚Üê toLMonadE Œì _ e‚ÇÅ
          e‚ÇÇ' ‚Üê toLMonadE Œì _ e‚ÇÇ
          just (branch e ispure-e e‚ÇÅ' e‚ÇÇ')

        toLMonad : ‚àÄ Œì ‚Üí List (U.Stmnt) ‚Üí Maybe (ULMonad Unit Œì Unit·µç)
        toLMonad Œì x = toLMonadE Œì Unit·µç (U.body (U.bodyR x (U.lit (record { gType = Unit·µç ; gValue = _ }))))



module ToLurkCF (ptpsIds : List (String)) (prms : _) (uniquePrms : _) (uniquePtpnts : _) where

  open import Glow.Simple.ASTDef 


  open AST-String one 

  open MonadicControlFlow.MonadicControlFlowUP {String} {builtIns = Basic-BuiltIns} (ptpsIds) prms uniquePrms (uniquePtpnts) public

  module L = LurkAST List String Unit

  bi-renderer : (Œ§ : GType) ‚Üí BI Œ§ ‚Üí String
  bi-renderer Œ§ (AST.bi' bIndex) = bIndex


  module T = Translate.unsafe {String} {builtIns = Basic-BuiltIns} {ptpsIds} {prms} {uniquePrms} {uniquePtpnts}
                tt "cons" bi-renderer

  module LH = LurkAST AList String Unit


  PID‚ÜíLExpr : PID ‚Üí L.Expr
  PID‚ÜíLExpr z = L.ExFieldElem _ (DistrustedParticipantId‚Üí‚Ñï ih'' z)

  -- TODO : merge those modules (may  require better parametrisation of LMonad')
  module safeAST where
    module T' = T.safeAST



    toLurkGlowcode : ‚àÄ {Œì Œ§} ‚Üí LMonad ‚Ñï Œì Œ§ ‚Üí L.Expr
    toLurkGlowcode (action x x‚ÇÅ x‚ÇÇ Œ§‚â°Unit·µç) =
       T.appS "action" (L.ExFieldElem _ x ‚à∑ PID‚ÜíLExpr x‚ÇÅ ‚à∑ [ h x‚ÇÇ ])
       where
         h : Action _ ‚Üí L.Expr
         h (withdrawA x _) = T.appS "withdraw" [ T'.translateE x ]
         h (depositA x _) = T.appS "deposit" [ T'.translateE x ]

    toLurkGlowcode (expectPub x x‚ÇÅ) = T.appS "publish" (L.ExFieldElem _ x ‚à∑ [ PID‚ÜíLExpr x‚ÇÅ ])
    toLurkGlowcode (next x x‚ÇÅ) = T.appS "next" (toLurkGlowcode x ‚à∑ [ toLurkGlowcode x‚ÇÅ ])
    toLurkGlowcode (bind {x = s} x x‚ÇÅ) =
       T.appS "bind" (toLurkGlowcode x ‚à∑ [ h ])
       where
         h : L.Expr
         h = L.ExLambda _
                 [ L.SymbolC s ]
                 (toLurkGlowcode x‚ÇÅ)
    toLurkGlowcode (pure x _) = T.appS "pure" [ T'.translateE x ]
    toLurkGlowcode (branch x _ x‚ÇÅ x‚ÇÇ) = L.ExIf _ (T'.translateE x) (toLurkGlowcode x‚ÇÅ) (toLurkGlowcode x‚ÇÇ)
    toLurkGlowcode (require e x x‚ÇÅ) = T.appS "require" ([ T'.translateE e ])



    fixListImp : L.Expr ‚Üí  LH.Expr
    fixListImp = LurkASTchangeListImp.mapLiImp List AList map-List toAList

    toLurkGlowcode' : ‚àÄ {Œì Œ§} ‚Üí LMonad ‚Ñï Œì Œ§ ‚Üí LH.Expr
    toLurkGlowcode' = fixListImp ‚àò T.addSignature ‚àò toLurkGlowcode

  module unsafeAST where
    module T' = T.unsafeAST

    module U = Unsafe


    toLurkGlowcode : ‚àÄ {Œì Œ§} ‚Üí ULMonad ‚Ñï Œì Œ§ ‚Üí L.Expr
    toLurkGlowcode (action x x‚ÇÅ x‚ÇÇ Œ§‚â°Unit·µç) =
       T.appS "action" (L.ExFieldElem _ x ‚à∑ PID‚ÜíLExpr x‚ÇÅ ‚à∑ [ h x‚ÇÇ ])
       where
         h : UAction _ ‚Üí L.Expr
         h (withdrawA x _) = T.appS "withdraw" [ T'.translateE x ]
         h (depositA x _) = T.appS "deposit" [ T'.translateE x ]

    toLurkGlowcode (expectPub x x‚ÇÅ) = T.appS "publish" (L.ExFieldElem _ x ‚à∑ [ PID‚ÜíLExpr x‚ÇÅ ])
    toLurkGlowcode (next x x‚ÇÅ) = T.appS "next" (toLurkGlowcode x ‚à∑ [ toLurkGlowcode x‚ÇÅ ])
    toLurkGlowcode (bind {x = s} x x‚ÇÅ) =
       T.appS "bind" (toLurkGlowcode x ‚à∑ [ h ])
       where
         h : L.Expr
         h = L.ExLambda _
                 [ L.SymbolC s ]
                 (toLurkGlowcode x‚ÇÅ)
    toLurkGlowcode (pure x _) = T.appS "pure" [ T'.translateE x ]
    toLurkGlowcode (branch x _ x‚ÇÅ x‚ÇÇ) = L.ExIf _ (T'.translateE x) (toLurkGlowcode x‚ÇÅ) (toLurkGlowcode x‚ÇÇ)
    toLurkGlowcode (require e x x‚ÇÅ) = T.appS "require" ([ T'.translateE e ])



    fixListImp : L.Expr ‚Üí  LH.Expr
    fixListImp = LurkASTchangeListImp.mapLiImp List AList map-List toAList

    toLurkGlowcode' : ULMonad ‚Ñï (con [] nothing) Unit·µç ‚Üí LH.Expr
    toLurkGlowcode' = fixListImp ‚àò T.addSignature ‚àò toLurkGlowcode



module examplesAB where

  open import Glow.Simple.ASTDef 


  open AST-String one 


  ptps = ("A" ‚à∑ "B" ‚à∑ [])
  uPtps = (toWitness {Q = UniqueByDec‚â° proj‚ÇÅ (map-List (_, false) ("A" ‚à∑ "B" ‚à∑ []))} tt)


  module noParams where
    open ToLurkCF ptps [] tt* uPtps 

    open LH public

    open import Cubical.Data.Unit renaming (tt to TU)

    idA idB : PID
    idA = pId "A" {toWitnessDP ((IsDistrustedParticipantId {ptps''} "A")) tt}
    idB = pId "B" {toWitnessDP ((IsDistrustedParticipantId {ptps''} "B")) tt}


    testLM : LMonad ‚Ñï (con [] nothing) Unit·µç 
    testLM = bind {x = "z"} {Œ§' = Nat} (next (next (action 0 idA (withdrawA < 2 > tt ) refl)
                        (action 1 idB (depositA < 2 > tt ) refl))
                    (pure < 4 > tt))
                   (bind {x = "zz"} {Œ§' = Nat} (expectPub 2 idA)
                       (action 3 idB (withdrawA < 3 > tt) refl))

    testLGC : LH.Expr
    testLGC = (safeAST.toLurkGlowcode' testLM)


    testOutput : {!!}
    testOutput = {! testLGC!}


  module coinFlip where
    open ToLurkCF ptps ( (AST.iwt "wagerAmount" Nat ‚à∑ AST.iwt "escrowAmount" Nat ‚à∑ []))
                    (toWitness {Q = UniqueByDec‚â° IdentifierWithType.name ((AST.iwt "wagerAmount" Nat ‚à∑ AST.iwt "escrowAmount" Nat ‚à∑ []))} tt) uPtps 

    open LH public

    open import Cubical.Data.Unit renaming (tt to TU)


    idA idB : PID
    idA = pId "A" {toWitnessDP ((IsDistrustedParticipantId {ptps''} "A")) tt}
    idB = pId "B" {toWitnessDP ((IsDistrustedParticipantId {ptps''} "B")) tt}

    testCoinFlip : Statements ih'' (con [] nothing)
    testCoinFlip = coinFlipConsensusCode


    testOutput : LH.Expr
    testOutput = fromJust (map-Maybe (safeAST.toLurkGlowcode' ‚àò labelStates') (tryTranslation.toLMonad _ coinFlipConsensusCode))

    testOutput' : LH.Expr
    testOutput' = fromJust (map-Maybe (unsafeAST.toLurkGlowcode' ‚àò labelStates') (tryTranslationUnsafe.toLMonad _ (ToUnsafe.stmntsF _ coinFlipConsensusCode)))

    zz : LabeledValue[ "coinFlip" ][ testOutput ] 
    zz = {!mkLV!}

    zz' : LabeledValue[ "coinFlipU" ][ testOutput' ]
    zz' = {!addLabel testOutput'!}

  module coinFlipProj where
    open ToLurkCF ("A" ‚à∑ "B" ‚à∑ []) (AST.iwt "wagerAmount" Nat ‚à∑ AST.iwt "escrowAmount" Nat ‚à∑ [])
                   ( (toWitness {Q = UniqueByDec‚â° IdentifierWithType.name ((AST.iwt "wagerAmount" Nat ‚à∑ AST.iwt "escrowAmount" Nat ‚à∑ []))} tt))
                   uPtps

    open LH public

    open import Glow.Simple.Lurk.Container

    open import Cubical.Data.Unit renaming (tt to TU)

    module U = Unsafe

    module UPO = UnsafeProjectOut

    testCoinFlipProjected : List (U.Stmnt ih'')
    testCoinFlipProjected = fixProofs' (List ‚àò U.Stmnt) (
        UPO.projectOut (pId "B" {toWitnessDP (IsHonestParticipantId {("A" , false) ‚à∑ ("B" , true) ‚à∑ []} "B") tt}) 
         (UPO.projectOut (pId "A" {toWitnessDP (IsHonestParticipantId {("A" , true) ‚à∑ ("B" , true) ‚à∑ []} "A") tt})
            (ToUnsafe.stmntsF (interactionHead (("A" , trusted) ‚à∑ ("B" , trusted) ‚à∑ []) ((iwt "wagerAmount" Nat) ‚à∑ (iwt "escrowAmount" Nat) ‚à∑ [])) coinFlipCode)))

    testOutput' : LH.Expr
    testOutput' = fromJust (map-Maybe (unsafeAST.toLurkGlowcode' ‚àò labelStates') (tryTranslationUnsafe.toLMonad _ (testCoinFlipProjected)))

    putIntoContainer : LH.Expr ‚Üí GLContainer
    putIntoContainer x = GLContainerC (toAList ptps) x (toAList (("wagerAmount" , "Nat") ‚à∑ [ "escrowAmount" , "Nat" ]))
    
    zz : LabeledValue[ "coinFlipP" ][ putIntoContainer testOutput' ]
    zz = {!mkLV!}

    coinFlipTest : GLInteractionTest
    coinFlipTest =
      GLInteractionTestC
        (putIntoContainer testOutput')
        ((toAList (("wagerAmount" , GLNat 10) ‚à∑ [ "escrowAmount" , GLNat 2 ])))
        (toAList (CallC 1 0 (Publish (DigestOf (GLNat 7)))
                ‚à∑ CallC 2 0 (Deposit 12)
                ‚à∑ []))

    zzT : LabeledValue[ "coinFlipPTest" ][ coinFlipTest ]
    zzT = labeledValue[ "coinFlipPTest" ][
            GLInteractionTestC
            (GLContainerC (ALc "A" (ALc "B" ALn))
             (Expr.ExLambda TU
              (ALc (SymbolC "wagerAmount") (ALc (SymbolC "escrowAmount") ALn))
              (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
               (ALc
                (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "publish"))
                 (ALc (Expr.ExFieldElem TU 1) (ALc (Expr.ExFieldElem TU 0) ALn)))
                (ALc
                 (Expr.ExLambda TU (ALc (SymbolC "commitment") ALn)
                  (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                   (ALc
                    (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "action"))
                     (ALc (Expr.ExFieldElem TU 2)
                      (ALc (Expr.ExFieldElem TU 0)
                       (ALc
                        (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "deposit"))
                         (ALc
                          (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "+‚Ñï"))
                           (ALc (Expr.ExSymbol TU (SymbolC "wagerAmount"))
                            (ALc (Expr.ExSymbol TU (SymbolC "escrowAmount")) ALn)))
                          ALn))
                        ALn))))
                    (ALc
                     (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                      (ALc
                       (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "publish"))
                        (ALc (Expr.ExFieldElem TU 3) (ALc (Expr.ExFieldElem TU 1) ALn)))
                       (ALc
                        (Expr.ExLambda TU (ALc (SymbolC "randB") ALn)
                         (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                          (ALc
                           (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "action"))
                            (ALc (Expr.ExFieldElem TU 4)
                             (ALc (Expr.ExFieldElem TU 1)
                              (ALc
                               (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "deposit"))
                                (ALc (Expr.ExSymbol TU (SymbolC "wagerAmount")) ALn))
                               ALn))))
                           (ALc
                            (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                             (ALc
                              (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "publish"))
                               (ALc (Expr.ExFieldElem TU 5) (ALc (Expr.ExFieldElem TU 0) ALn)))
                              (ALc
                               (Expr.ExLambda TU (ALc (SymbolC "randA") ALn)
                                (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                                 (ALc
                                  (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                   (ALc
                                    (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "digestNat"))
                                     (ALc (Expr.ExSymbol TU (SymbolC "randA")) ALn))
                                    ALn))
                                  (ALc
                                   (Expr.ExLambda TU (ALc (SymbolC "mbCommitment") ALn)
                                    (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                                     (ALc
                                      (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "require"))
                                       (ALc
                                        (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "==Digest"))
                                         (ALc (Expr.ExSymbol TU (SymbolC "commitment"))
                                          (ALc (Expr.ExSymbol TU (SymbolC "mbCommitment")) ALn)))
                                        ALn))
                                      (ALc
                                       (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                                        (ALc
                                         (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                          (ALc
                                           (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "^^^"))
                                            (ALc (Expr.ExSymbol TU (SymbolC "randA"))
                                             (ALc (Expr.ExSymbol TU (SymbolC "randB")) ALn)))
                                           ALn))
                                         (ALc
                                          (Expr.ExLambda TU (ALc (SymbolC "n0") ALn)
                                           (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                                            (ALc
                                             (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                              (ALc
                                               (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "&&&"))
                                                (ALc (Expr.ExSymbol TU (SymbolC "n0"))
                                                 (ALc
                                                  (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "cons"))
                                                   (ALc (Expr.ExT TU) (ALc (Expr.ExNil TU) ALn)))
                                                  ALn)))
                                               ALn))
                                             (ALc
                                              (Expr.ExLambda TU (ALc (SymbolC "n1") ALn)
                                               (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                                                (ALc
                                                 (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                                                  (ALc
                                                   (Expr.ExIf TU
                                                    (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "==Nat"))
                                                     (ALc (Expr.ExSymbol TU (SymbolC "n1"))
                                                      (ALc (Expr.ExNil TU) ALn)))
                                                    (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                                                     (ALc
                                                      (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                                       (ALc
                                                        (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "*‚Ñï"))
                                                         (ALc
                                                          (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "cons"))
                                                           (ALc (Expr.ExNil TU)
                                                            (ALc
                                                             (Expr.ExApply TU
                                                              (Expr.ExSymbol TU (SymbolC "cons"))
                                                              (ALc (Expr.ExT TU) (ALc (Expr.ExNil TU) ALn)))
                                                             ALn)))
                                                          (ALc (Expr.ExSymbol TU (SymbolC "wagerAmount")) ALn)))
                                                        ALn))
                                                      (ALc
                                                       (Expr.ExLambda TU (ALc (SymbolC "w1") ALn)
                                                        (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                                                         (ALc
                                                          (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                                           (ALc
                                                            (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "+‚Ñï"))
                                                             (ALc (Expr.ExSymbol TU (SymbolC "w1"))
                                                              (ALc (Expr.ExSymbol TU (SymbolC "escrowAmount"))
                                                               ALn)))
                                                            ALn))
                                                          (ALc
                                                           (Expr.ExLambda TU (ALc (SymbolC "w2") ALn)
                                                            (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                                                             (ALc
                                                              (Expr.ExApply TU
                                                               (Expr.ExSymbol TU (SymbolC "action"))
                                                               (ALc (Expr.ExFieldElem TU 6)
                                                                (ALc (Expr.ExFieldElem TU 0)
                                                                 (ALc
                                                                  (Expr.ExApply TU
                                                                   (Expr.ExSymbol TU (SymbolC "withdraw"))
                                                                   (ALc (Expr.ExSymbol TU (SymbolC "w2")) ALn))
                                                                  ALn))))
                                                              (ALc
                                                               (Expr.ExApply TU
                                                                (Expr.ExSymbol TU (SymbolC "pure"))
                                                                (ALc (Expr.ExQuotedName TU "glow-unit-lit")
                                                                 ALn))
                                                               ALn))))
                                                           ALn))))
                                                       ALn)))
                                                    (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "bind"))
                                                     (ALc
                                                      (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                                       (ALc
                                                        (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "*‚Ñï"))
                                                         (ALc
                                                          (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "cons"))
                                                           (ALc (Expr.ExNil TU)
                                                            (ALc
                                                             (Expr.ExApply TU
                                                              (Expr.ExSymbol TU (SymbolC "cons"))
                                                              (ALc (Expr.ExT TU) (ALc (Expr.ExNil TU) ALn)))
                                                             ALn)))
                                                          (ALc (Expr.ExSymbol TU (SymbolC "wagerAmount")) ALn)))
                                                        ALn))
                                                      (ALc
                                                       (Expr.ExLambda TU (ALc (SymbolC "w1") ALn)
                                                        (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                                                         (ALc
                                                          (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "action"))
                                                           (ALc (Expr.ExFieldElem TU 7)
                                                            (ALc (Expr.ExFieldElem TU 1)
                                                             (ALc
                                                              (Expr.ExApply TU
                                                               (Expr.ExSymbol TU (SymbolC "withdraw"))
                                                               (ALc (Expr.ExSymbol TU (SymbolC "w1")) ALn))
                                                              ALn))))
                                                          (ALc
                                                           (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "next"))
                                                            (ALc
                                                             (Expr.ExApply TU
                                                              (Expr.ExSymbol TU (SymbolC "action"))
                                                              (ALc (Expr.ExFieldElem TU 8)
                                                               (ALc (Expr.ExFieldElem TU 0)
                                                                (ALc
                                                                 (Expr.ExApply TU
                                                                  (Expr.ExSymbol TU (SymbolC "withdraw"))
                                                                  (ALc
                                                                   (Expr.ExSymbol TU (SymbolC "escrowAmount"))
                                                                   ALn))
                                                                 ALn))))
                                                             (ALc
                                                              (Expr.ExApply TU
                                                               (Expr.ExSymbol TU (SymbolC "pure"))
                                                               (ALc (Expr.ExQuotedName TU "glow-unit-lit") ALn))
                                                              ALn)))
                                                           ALn))))
                                                       ALn))))
                                                   (ALc
                                                    (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                                     (ALc (Expr.ExQuotedName TU "glow-unit-lit") ALn))
                                                    ALn)))
                                                 (ALc
                                                  (Expr.ExApply TU (Expr.ExSymbol TU (SymbolC "pure"))
                                                   (ALc (Expr.ExQuotedName TU "glow-unit-lit") ALn))
                                                  ALn))))
                                              ALn))))
                                          ALn)))
                                       ALn))))
                                   ALn))))
                               ALn)))
                            ALn))))
                        ALn)))
                     ALn))))
                 ALn))))
             (ALc ("wagerAmount" , "Nat") (ALc ("escrowAmount" , "Nat") ALn)))
            (ALc ("wagerAmount" , GLNat 10)
             (ALc ("escrowAmount" , GLNat 2) ALn))
            (ALc (CallC 1 0 (Publish (DigestOf (GLNat 7))))
             (ALc (CallC 2 0 (Deposit 12)) ALn))
            ]labeledValueEnd
